<?php
// $Id$

/**
 * Implementation of hook_permission().
 */
function skinr_ui_permission() {
  return array(
    'administer skinr' => array(
      'title' => t('Administer Skinr'),
      'description' => t('Administer Skinr\'s settings.'),
    ),
    'access skinr' => array(
      'title' => t('Access Skinr\'s settings'),
      'description' => t('Set Skinr options for individual themes.'),
    ),
    'access skinr classes' => array(
      'title' => t('Access Skinr\'s advanced settings'),
      'description' => t('Set advanced Skinr options, such as custom CSS classes and custom template files.'),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function skinr_ui_menu() {
  $items['admin/appearance/skinr'] = array(
    'title' => 'Skinr',
    'description' => 'Manage your skinr settings and rules, import and export skinr settings for each theme, and configure skinr\'s overlay settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('skinr_ui_list'),
    'access arguments' => array('administer skinr'),
    'file' => 'skinr_ui.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/appearance/skinr/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'parent' => 'admin/appearance/skinr',
    'description' => t('Manage Skinr settings.'),
    'weight' => -10,
  );

  // Rules.
  $items['admin/appearance/skinr/rule'] = array(
    'title' => 'Rules',
    'page callback' => 'skinr_rules',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer skinr'),
    'parent' => 'admin/appearance/skinr',
    'weight' => 1,
    'description' => t('Configure region and page level Skinr rules.'),
    'file' => 'skinr_ui.rules.inc',
  );
  $items['admin/appearance/skinr/rule/add'] = array(
    'title' => 'Create a new rule',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('skinr_rule_add'),
    'type' => MENU_LOCAL_ACTION,
    'access arguments' => array('administer skinr'),
    'file' => 'skinr_ui.rules.inc',
  );
  $items['admin/appearance/skinr/rule/edit'] = array(
    'title' => 'Edit Skinr rule',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('skinr_rule_edit'),
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer skinr'),
    'file' => 'skinr_ui.rules.inc',
  );
  $items['admin/appearance/skinr/rule/delete'] = array(
    'title' => 'Delete Skinr rule',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('skinr_rule_delete_confirm'),
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer skinr'),
    'file' => 'skinr_ui.rules.inc',
  );

  // Settings.
  $items['admin/appearance/skinr/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('skinr_ui_settings'),
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer skinr'),
    'parent' => 'admin/appearance/skinr',
    'weight' => 4,
    'description' => t('Configure Skinr settings.'),
    'file' => 'skinr_ui.admin.inc',
  );
  // Import & Export.
  $items['admin/appearance/skinr/import'] = array(
    'title' => 'Import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('skinr_ui_import_form'),
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer skinr'),
    'parent' => 'admin/appearance/skinr',
    'weight' => 2,
    'description' => t('Import Skinr settings.'),
    'file' => 'skinr_ui.admin.inc',
  );
  $items['admin/appearance/skinr/export'] = array(
    'title' => 'Export',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('skinr_ui_export_form'),
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer skinr'),
    'parent' => 'admin/appearance/skinr',
    'weight' => 3,
    'description' => t('Export Skinr settings.'),
    'file' => 'skinr_ui.admin.inc',
  );

  // Edit Skinr settings.
  $items['admin/appearance/skinr/edit/%/%'] = array(
    'title' => 'Edit skin',
    'title callback' => 'skinr_ui_edit_title',
    'title arguments' => array(4, 5),
    'page callback' => 'skinr_ui_edit',
    'page arguments' => array(4, 5), // module, sid
    'type' => MENU_CALLBACK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'access arguments' => array('administer skinr'),
  );
  $items['admin/appearance/skinr/edit/%/%/configure'] = array(
    'title' => 'Edit skin',
    'title callback' => 'skinr_ui_edit_contextual_title',
    'title arguments' => array(4, 5),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
  );

  // Delete Skinr settings.
  $items['admin/appearance/skinr/delete/%/%/%'] = array(
    'title' => 'Delete skin',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('skinr_ui_delete_confirm', 4, 5, 6), // theme, module, sid
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer skinr'),
    'file' => 'skinr_ui.admin.inc',
  );

  // Fetch skin file info through AJAX.
  $items['admin/appearance/skinr/info/%'] = array(
    'title' => 'Skinr file information',
    'page callback' => 'skinr_ui_skin_get_files',
    'page arguments' => array(4),
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer skinr'),
  );

  return $items;
}

/**
 * Implementation of hook_help().
 */
function skinr_ui_help($path, $arg) {
  if (module_exists('advanced_help')) {
    $advanced_help = '<p>' . t('Visit the <a href="@skinr-help">help page</a> for full documentation.', array('@skinr-help' => url('admin/advanced_help/skinr'))). '</p>';
  }
  else {
    $advanced_help = '<p>' . t('Please download and enable the <a href="http://drupal.org/project/advanced_help">Advanced Help</a> module for full Skinr documentation.') . '</p>';
  }
  switch ($path) {
    case 'admin/appearance/skinr':
      return  '<p>' . t('Below is a list of all Skinr settings in use on this site.') . '</p>' . $advanced_help;
    case 'admin/appearance/skinr/rule':
      return  '<p>' . t('Below is a list of Skinr rules. Rules can be created for <em>region</em> and <em>page</em> elements.  Start by creating a new rule.') . '</p>';
    case 'admin/appearance/skinr/rule/add':
      return  '<p>' . t('Choose the type of rule you wish to create. Page rules apply classes to the &lt;body&gt; tag. Region rules apply to the region wrapper &lt;div&gt; tag.') . '</p>';
    case 'admin/appearance/skinr/import':
      return  '<p>' . t('To import Skinr settings, ensure the correct theme is selected, paste exported code and click the "Import" button.') . '</p>';
    case 'admin/appearance/skinr/export':
      return  '<p>' . t('To export Skinr settings, ensure the correct theme is selected and click the "Export" button.') . '</p>';
      break;
  }
}

/**
 * Menu title callback; sets the title for a Skinr settings form page.
 *
 * @param $module
 *   The module that we're editing settings of.
 * @param $sid
 *   The sid of the object we're editing settings of.
 */
function skinr_ui_edit_title($module, $sid) {
  return t('Skinr settings for !module type !sid', array('!module' => $module, '!sid' => $sid));
}

/**
 * Menu title callback; sets the title for a Skinr settings form page.
 *
 * @param $module
 *   The module that we're editing settings of.
 * @param $sid
 *   The sid of the object we're editing settings of.
 */
function skinr_ui_edit_contextual_title($module, $sid) {
  $contextual_links = skinr_ui_get_contextual_links();
  foreach ($contextual_links as $hook => $links) {
    $counter = 1;
    foreach ($links as $link) {
      if ($link[1][0] == $module && $link[1][1] == $sid) {
        if (count($links) > 1) {
          return t('Edit skin !number', array('!number' => $counter));
        }
        break 2;
      }
      $counter++;
    }
  }
  return t('Edit skin');
}

/**
 * Menu callback; prepares some variables and displays a Skinr edit form.
 *
 * @param $module
 *   The module that we're editing settings of.
 * @param $sid
 *   The sid of the object we're editing settings of.
 */
function skinr_ui_edit($module, $sid) {
  $arguments = array(
    'skinr' => array(
      'module' => $module,
      'sid' => $sid,
    ),
  );
  return drupal_get_form('skinr_ui_form', $arguments);
}

/**
 * Skinr form.
 */
function skinr_ui_form($form, &$form_state, $arguments) {
  $form = array();

  $form['skinr']['module'] = array(
    '#type' => 'hidden',
    '#value' => !empty($form_state['skinr']['module']) ? $form_state['skinr']['module'] : $arguments['skinr']['module'],
  );
  $form['skinr']['sid'] = array(
    '#type' => 'hidden',
    '#value' => !empty($form_state['skinr']['sid']) ? $form_state['skinr']['sid'] : $arguments['skinr']['sid'],
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 50,
  );

  return $form;
}

/**
 * Implementation of hook_form_alter().
 */
function skinr_ui_form_alter(&$form, $form_state, $form_id) {
  $skinr_config = skinr_fetch_config();
  $info = skinr_skin_data();

  foreach ($skinr_config as $module => $settings) {
    if (isset($settings['form'][$form_id])) {
      if (!empty($form['skinr']) && $form['skinr']['module']['#value'] !== $module) {
        continue;
      }

      $form_settings = array_merge(_skinr_fetch_config_defaults('form'), $settings['form'][$form_id]);

      // Check for access.
      if (!skinr_handler('access_handler', 'access skinr', $form_settings['access_handler'], $form, $form_state)) {
        // Deny access.
        break;
      }

      // Ensure we have the required preprocess_hook or preprocess_hook_callback.
      if (empty($form_settings['preprocess_hook']) && empty($form_settings['preprocess_hook_callback'])) {
        trigger_error(sprintf("No preprocess_hook or preprocess_hook_callback was found for form_id '%s' in module '%s'.", $form_id, $module), E_USER_ERROR);
      }

      $themes = list_themes();
      ksort($themes);

      foreach ($themes as $theme) {
        if (!$theme->status) {
          continue;
        }

        if (!isset($form['skinr_settings'])) {
          $form['skinr_settings'] = array(
            '#tree' => TRUE,
            '#weight' => $form_settings['skinr_weight'],
          );
        }

        $preprocess_hooks = isset($form_settings['preprocess_hook']) ? $form_settings['preprocess_hook'] : skinr_handler('preprocess_hook_callback', '', $form_settings['preprocess_hook_callback'], $form, $form_state);
        if (!is_array($preprocess_hooks)) {
          $preprocess_hooks = array($preprocess_hooks);
        }

        if (!$form_state['submitted']) {
          if ($skinr = skinr_handler('data_handler', 'form', $form_settings['data_handler'], $form, $form_state, $theme->name, $module, $form_settings)) {
            $defaults  = $skinr->skins;
            $additional_default = isset($skinr->skins['_additional']) ? $skinr->skins['_additional'] : '';
            $template_default = isset($skinr->skins['_template']) ? $skinr->skins['_template'] : '';
          }
          else {
            $defaults  = array();
            $additional_default = '';
            $template_default = '';
          }
        }
        else {
          // Handle preview before submit.
          $defaults  = $form_state['values']['widgets'];
          $additional_default = $form_state['values']['_additional'];
          $template_default = $form_state['values']['_template'];
        }

        if (!isset($form['skinr_settings'][$module . '_group'])) {
          $form['skinr_settings'][$module . '_group'] = array(
            '#type' => 'fieldset',
            '#title' => t('@skinr_title @title', array('@skinr_title' => $form_settings['skinr_title'], '@title' => $form_settings['title'])),
            '#description' => t($form_settings['description']) . ' <strong>' . implode(', ', $preprocess_hooks) . '</strong>.',
            '#weight' => $form_settings['weight'],
            '#collapsible' => TRUE,
            '#collapsed' => $form_settings['collapsed'],
          );
        }

        // Get current theme, but make sure it's not the admin theme when we're editing with AJAX.
        $current_theme = skinr_current_theme(TRUE);

        $form['skinr_settings'][$module . '_group'][$theme->name] = array(
          '#type' => 'fieldset',
          '#title' => $theme->info['name'] . ($theme->name == $current_theme ? ' (' . t('enabled + default') . ')' : ''),
          '#collapsible' => TRUE,
          '#collapsed' => $theme->name == $current_theme ? FALSE : TRUE,
        );
        if ($theme->name == $current_theme) {
          $form['skinr_settings'][$module . '_group'][$theme->name]['#attributes'] = array('class' => array('skinr-ui-current-theme'));
          $form['skinr_settings'][$module . '_group'][$theme->name]['#weight'] = -10;
        }

        // Create individual widgets for each skin.
        $template_options = array();
        if (isset($info[$theme->name]['skins'])) {
          foreach ($info[$theme->name]['skins'] as $skin_id => $skin) {
            // Check if this skin applies to this hook.
            if (!is_array($skin['features']) || (!in_array('*', $skin['features']) && !_skinr_is_featured($preprocess_hooks, $skin['features']))) {
              continue;
            }

            // Create widget.
            switch ($skin['type']) {
              case 'checkboxes':
                $form['skinr_settings'][$module . '_group'][$theme->name]['widgets'][$skin_id] = array(
                  '#type' => 'checkboxes',
                  '#multiple' => TRUE,
                  '#title' => t($skin['title']),
                  '#options' => skinr_ui_info_options_to_form_options($skin['options']),
                  '#default_value' => isset($defaults[$skin_id]) ? $defaults[$skin_id] : array(),
                  '#description' => t($skin['description']),
                );
                break;
              case 'radios':
                $form['skinr_settings'][$module . '_group'][$theme->name]['widgets'][$skin_id] = array(
                  '#type' => 'radios',
                  '#title' => t($skin['title']),
                  '#options' => array_merge(array('' => '&lt;none&gt;'), skinr_ui_info_options_to_form_options($skin['options'])),
                  '#default_value' => isset($defaults[$skin_id]) ? $defaults[$skin_id] : '',
                  '#description' => t($skin['description']),
                );
                break;
              case 'select':
                $form['skinr_settings'][$module . '_group'][$theme->name]['widgets'][$skin_id] = array(
                  '#type' => 'select',
                  '#title' => t($skin['title']),
                  '#options' => array_merge(array('' => '<none>'), skinr_ui_info_options_to_form_options($skin['options'])),
                  '#default_value' => isset($defaults[$skin_id]) ? $defaults[$skin_id] : '',
                  '#description' => t($skin['description']),
                );
                break;
            }

            // Prepare templates.
            $templates = skinr_ui_info_templates_filter($skin['templates'], $preprocess_hooks);
            $template_options = array_merge($template_options, skinr_ui_info_templates_to_form_options($templates));
          }
        }

        // Check for access.
        if (skinr_handler('access_handler', 'access skinr classes', $form_settings['access_handler'], $form, $form_state)) {
          $form['skinr_settings'][$module . '_group'][$theme->name]['advanced'] = array(
            '#type' => 'fieldset',
            '#title' => t('Advanced options'),
            '#collapsible' => TRUE,
            '#collapsed' => empty($additional_default),
          );
          $form['skinr_settings'][$module . '_group'][$theme->name]['advanced']['_additional'] = array(
            '#type' => 'textfield',
            '#title' => t('Apply additional CSS classes'),
            '#description' => t('Optionally add additional CSS classes. Example: <em>my-first-class my-second-class</em>'),
            '#default_value' => $additional_default,
          );
          $form['skinr_settings'][$module . '_group'][$theme->name]['advanced']['_template'] = array(
            '#type' => 'select',
            '#title' => t('Template file'),
            '#options' => array_merge(array('' => 'Default'), $template_options),
            '#default_value' => $template_default,
            '#description' => t('Optionally, select a template file to associate with the hooks <strong>!hooks</strong>. Selecting "Default" will let Drupal handle this.', array('!hooks' => implode(', ', $preprocess_hooks))),
          );

          // Only add validation handler once.
          if (!isset($form['#validate']) || !in_array('skinr_ui_form_validate', $form['#validate'])) {
            $form['#validate'][] = 'skinr_ui_form_validate';
          }
          // Special for views.
          if (isset($form['buttons']['submit']['#validate']) && !in_array('skinr_ui_form_validate', $form['buttons']['submit']['#validate'])) {
            $form['buttons']['submit']['#validate'][] = 'skinr_ui_form_validate';
          }
        }
      }

      // Add weight to additional settings and submit form elements.
      $form['additional_settings']['#weight'] = 39;
      $form['submit']['#weight'] = 40;

      // Only add submit handler once.
      eval('$element =& $form' . $form_settings['submit_handler_attach_to'] . ';');
      if (!empty($element) && !in_array('skinr_ui_form_submit', $element)) {
        $string = $element[] = 'skinr_ui_form_submit';
      }

      // Keep looping, there might be other modules that implement the same form_id.
    }
  }
}

/**
 * Validation handler.
 */
function skinr_ui_form_validate($form, &$form_state) {
  $form_id = $form_state['values']['form_id'];
  $skinr_config = skinr_fetch_config();

  foreach ($skinr_config as $module => $settings) {
    if (isset($settings['form'][$form_id]) && isset($form_state['values']['skinr_settings'][$module . '_group'])) {
      foreach ($form_state['values']['skinr_settings'][$module . '_group'] as $theme_name => $theme) {
        if (isset($theme['advanced']['_additional'])) {
          $form_settings = array_merge(_skinr_fetch_config_defaults('form'), $settings['form'][$form_id]);

          // Validate additional classes field.
          if (preg_match('/[^a-zA-Z0-9\-\_\s]/', $theme['advanced']['_additional'])) {
            form_set_error('skinr_settings][' . $module . '_group][' . $theme_name . '][advanced][_additional', t('Additional classes for Skinr may only contain alphanumeric characters, spaces, - and _.'));
          }

          // Keep looping, there might be other modules that implement the same form_id.
        }
      }
    }
  }
}

/**
 * Submit handler.
 */
function skinr_ui_form_submit($form, &$form_state) {
  $form_id = $form_state['values']['form_id'];
  $skinr_config = skinr_fetch_config();
  $current_theme = skinr_current_theme(TRUE);

  foreach ($skinr_config as $module => $settings) {
    if (isset($settings['form'][$form_id])) {
      $form_settings = array_merge(_skinr_fetch_config_defaults('form'), $settings['form'][$form_id]);
      skinr_handler('submit_handler', '', $form_settings['submit_handler'], $form, $form_state, $module, $form_settings);

      // Keep looping, there might be other modules that implement the same form_id.
    }
  }
}

/**
 * Implementation of hook_preprocess().
 */
function skinr_ui_preprocess(&$variables, $hook) {
  $skinr_config = skinr_fetch_config();

  $original_hook = $hook;
  if (isset($theme_registry[$hook]['original hook'])) {
    $original_hook = $theme_registry[$hook]['original hook'];
  }

  foreach ($skinr_config as $module => $settings) {
    if (!empty($settings['preprocess'][$original_hook])) {

      // Set contextual links.
      if (!empty($settings['contextual_links'][$original_hook])) {
        if ($contextual_links = skinr_handler('contextual_links', '', $settings['contextual_links'][$original_hook]['contextual_links_handler'], $variables)) {
          skinr_ui_contextual_links($variables, $original_hook, $contextual_links);
        }
      }
    }
  }
}

/**
 * Set contextual menu items for skinr. We couldn't use hook_block_view_alter()
 * because not all blocks are allowing the context to be set from there.
 */
function skinr_ui_contextual_links(&$variables, $hook, $contextual_links) {
  _skinr_ui_set_contextual_links($hook, $contextual_links);

  $hooks = theme_get_registry();

  // Determine the primary theme function argument.
  if (isset($hooks[$hook]['variables'])) {
    $keys = array_keys($hooks[$hook]['variables']);
    $key = $keys[0];
  }
  else {
    $key = $hooks[$hook]['render element'];
  }
  if (isset($variables[$key])) {
    $element =& $variables[$key];
  }

  if (isset($element) && is_array($element)) {
    foreach ($contextual_links as $key => $contextual_link) {
      $element['#contextual_links'][$key] = $contextual_link;
    }
  }
}

function skinr_ui_get_contextual_links() {
  return _skinr_ui_set_contextual_links();
}

function _skinr_ui_set_contextual_links($hook = NULL, $links = NULL) {
  static $contextual_links = array();

  if ($hook && $links) {
    if (!isset($contextual_links[$hook])) {
      $contextual_links[$hook] = $links;
    }
  }

  return $contextual_links;
}

/**
 * Helper function determine whether one of a set of hooks exists in a list of
 * required features.
 */
function _skinr_is_featured($preprocess_hooks, $features) {
  foreach ($preprocess_hooks as $preprocess_hook) {
    if (in_array($preprocess_hook, $features)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Helper function to convert an array of options, as specified in the info
 * file, into an array usable by form api.
 */
function skinr_ui_info_options_to_form_options($options) {
  $form_options = array();
  foreach ($options as $option) {
    $form_options[$option['class']] = t($option['label']);
  }
  return $form_options;
}

/**
 * Helper function to convert an array of template filenames, as specified in
 * the info file, into an array usable by form api.
 */
function skinr_ui_info_templates_to_form_options($templates) {
  $form_options = array();
  foreach ($templates as $template) {
    // If it exists, strip .tpl.php from template.
    $template = str_replace('.tpl.php', '', $template);
    $form_options[$template] = $template . '.tpl.php';
  }
  return $form_options;
}

/**
 * Helper function to filter templates by preprocess_hooks.
 */
function skinr_ui_info_templates_filter($templates, $preprocess_hooks) {
  $filtered_templates = array();
  foreach ($templates as $template) {
    // If it exists, strip .tpl.php from template.
    $template = str_replace('.tpl.php', '', $template);
    foreach ($preprocess_hooks as $preprocess_hook) {
      if (drupal_substr(str_replace('_', '-', $template), (drupal_strlen($preprocess_hook) * -1)) == str_replace('_', '-', $preprocess_hook)) {
        $filtered_templates[] = $template;
      }
    }
  }
  return $filtered_templates;
}
